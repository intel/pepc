# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Tero Kristo <tero.kristo@linux.intel.com>

"""
This module provides API to MSR 0x614 (MSR_PKG_POWER_INFO).
"""

from pepclibs import CPUModels
from pepclibs.msr import _FeaturedMSR
from pepclibs.helperlibs import ClassHelpers

# The Package Power Info Model Specific Register.
MSR_PKG_POWER_INFO = 0x614

# CPUs supporting the "Package Power Info" MSR.
_PPI_VFMS = CPUModels.CPU_GROUPS["GNR"] +         \
            CPUModels.CPU_GROUPS["EMR"] +         \
            CPUModels.CPU_GROUPS["METEORLAKE"] +  \
            CPUModels.CPU_GROUPS["SPR"] +         \
            CPUModels.CPU_GROUPS["RAPTORLAKE"] +  \
            CPUModels.CPU_GROUPS["ALDERLAKE"] +   \
            CPUModels.CPU_GROUPS["ROCKETLAKE"] +  \
            CPUModels.CPU_GROUPS["TIGERLAKE"] +   \
            CPUModels.CPU_GROUPS["ICELAKE"] +     \
            CPUModels.CPU_GROUPS["COMETLAKE"] +   \
            CPUModels.CPU_GROUPS["KABYLAKE"] +    \
            CPUModels.CPU_GROUPS["CANNONLAKE"] +  \
            CPUModels.CPU_GROUPS["SKYLAKE"] +     \
            CPUModels.CPU_GROUPS["BROADWELL"] +   \
            CPUModels.CPU_GROUPS["HASWELL"] +     \
            CPUModels.CPU_GROUPS["IVYBRIDGE"] +   \
            CPUModels.CPU_GROUPS["SANDYBRIDGE"] + \
            CPUModels.CPU_GROUPS["WESTMERE"] +    \
            CPUModels.CPU_GROUPS["TREMONT"] +     \
            CPUModels.CPU_GROUPS["GOLDMONT"] +    \
            CPUModels.CPU_GROUPS["PHI"]

# Description of CPU features controlled by the Package Power Info MSR. Please, refer to the notes
# for '_FeaturedMSR.FEATURES' for more comments.
FEATURES = {
    "tdp": {
        "name": "CPU package thermal design power",
        "sname": "package",
        "iosname": "package",
        "help": """CPU package thermal design power in Watts.""",
        "vfms": _PPI_VFMS,
        "type": "float",
        "bits": (14, 0),
        "writable": False,
    },
}

class PackagePowerInfo(_FeaturedMSR.FeaturedMSR):
    """
    This class provides API to MSR 0x614 (MSR_PKG_POWER_INFO).
    """

    regaddr = MSR_PKG_POWER_INFO
    regname = "MSR_PKG_POWER_INFO"
    vendor = "GenuineIntel"

    def _get_unitobj(self):
        """Returns a 'RaplPowerUnit.RaplPowerUnit()' object."""

        if not self._unitobj:
            from pepclibs.msr import RaplPowerUnit # pylint: disable=import-outside-toplevel
            self._unitobj = RaplPowerUnit.RaplPowerUnit(pman=self._pman, cpuinfo=self._cpuinfo,
                                                        msr=self._msr)

        return self._unitobj

    def _get_units(self, unitname):
        """Returns the named system unit value."""

        cpu = self._cpuinfo.get_cpus()[0]
        return self._get_unitobj().read_cpu_feature(unitname, cpu)

    def _get_power_units(self):
        """Returns the system 'power units' value in Watts."""

        if not self._power_units:
            self._power_units = self._get_units("power_units")
        return self._power_units

    def _get_feature(self, fname, cpus="all"):
        """Returns the value for a feature."""

        bits = self._features[fname]["bits"]

        for cpu, val in self._msr.read_bits(self.regaddr, bits, cpus=cpus,
                                            iosname=self._features[fname]["iosname"]):
            val *= self._get_power_units()

            yield (cpu, val)

    def _set_baseclass_attributes(self):
        """Set the attributes the superclass requires."""

        self.features = FEATURES

    def __init__(self, cpuinfo, pman=None, msr=None):
        """
        The class constructor. The argument are as follows.
          * cpuinfo - CPU information object generated by 'CPUInfo.CPUInfo()'.
          * pman - the process manager object that defines the host to run the measurements on.
          * msr - the 'MSR.MSR()' object to use for writing to the MSR register.
        """

        self._unitobj = None
        self._power_units = None

        super().__init__(cpuinfo, pman=pman, msr=msr)

    def close(self):
        """Uninitialize the class object."""

        ClassHelpers.close(self, close_attrs=("_unitobj",))

        super().close()
