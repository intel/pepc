# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2020-2025 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

"""
This module provides PM QoS management API.
"""

# TODO: finish annotating and modernizing this module.
from __future__ import annotations # Remove when switching to Python 3.10+.

import typing
from typing import Final
from pepclibs import _PropsClassBase
from pepclibs.helperlibs import ClassHelpers
from pepclibs.helperlibs.Exceptions import Error

if typing.TYPE_CHECKING:
    from pepclibs.PropsTypes import PropertyTypedDict

# This dictionary describes the CPU properties this module supports.
#
# While this dictionary is user-visible and can be used, it is not recommended, because it is not
# complete. This dictionary is extended by 'PMQoS' objects. Use the full dictionary via
# 'PMQoS.props'.
#
# Some properties have scope name set to 'None' because the scope may be different for different
# systems. In such cases, the scope can be obtained via 'PMQoS.get_sname()'.
PROPS: Final[dict[str, PropertyTypedDict]] = {
    "latency_limit": {
        "name": "Linux per-CPU PM QoS latency limit",
        "unit": "s",
        "type": "float",
        "sname": "CPU",
        "mnames": ("sysfs",),
        "writable": True,
    },
    # In general, the global latency limit is writable, but the limit is active only as long as the
    # process keeps the character device open.
    "global_latency_limit": {
        "name": "Linux global PM QoS latency limit",
        "unit": "s",
        "type": "float",
        "sname": "global",
        "mnames": ("cdev",),
        "writable": False,
    },
}

class PMQoS(_PropsClassBase.PropsClassBase):
    """
    This class provides API for managing platform settings related to PM QoSs. Refer to
    '_PropsClassBase.PropsClassBase' docstring for public methods overview.
    """

    def _get_linux_pmqos_obj(self):
        """Return a '_LinuxPMQoSSysfs' object."""

        if not self._linux_pmqos_obj:
            from pepclibs import _LinuxPMQoS # pylint: disable=import-outside-toplevel

            sysfs_io = self._get_sysfs_io()
            self._linux_pmqos_obj = _LinuxPMQoS.LinuxPMQoS(pman=self._pman, sysfs_io=sysfs_io,
                                                           enable_cache=self._enable_cache)
        return self._linux_pmqos_obj

    def _get_prop_cpus(self, pname, cpus, _):
        """
        For every CPU in 'cpus', yield a '(cpu, val)' tuple, 'val' is property 'pname' value for CPU
        'cpu'. Use mechanism 'mname'.
        """

        linux_pmqos_obj = self._get_linux_pmqos_obj()

        if pname == "latency_limit":
            yield from linux_pmqos_obj.get_latency_limit(cpus)
        elif pname == "global_latency_limit":
            limit = linux_pmqos_obj.get_global_latency_limit()
            for cpu in cpus:
                yield (cpu, limit)
        else:
            raise Error(f"BUG: unknown property '{pname}'")

    def _set_prop_cpus(self, pname, val, cpus, _):
        """Set property 'pname' to value 'val' for CPUs in 'cpus'. Use mechanism 'mname'."""

        linux_pmqos_obj = self._get_linux_pmqos_obj()

        if pname == "latency_limit":
            linux_pmqos_obj.set_latency_limit(val, cpus)

        raise Error("BUG: unsupported property '{pname}'")

    def __init__(self, pman=None, cpuinfo=None, sysfs_io=None, enable_cache=True):
        """
        The class constructor. The arguments are as follows.
          * pman - the process manager object that defines the target host.
          * cpuinfo - CPU information object generated by 'CPUInfo.CPUInfo()'.
          * sysfs_io - an '_SysfsIO.SysfsIO()' object which should be used for accessing sysfs
                       files.
          * enable_cache - this argument can be used to disable caching.
        """

        super().__init__(pman=pman, cpuinfo=cpuinfo, sysfs_io=sysfs_io, enable_cache=enable_cache)

        self._linux_pmqos_obj = None

        super()._init_props_dict(PROPS)

    def close(self):
        """Uninitialize the class object."""

        close_attrs = ("_linux_pmqos_obj",)
        ClassHelpers.close(self, close_attrs=close_attrs)

        super().close()
