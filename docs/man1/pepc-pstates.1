.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "PSTATES" "" "09-03-2023" "" ""
.hy
.SH Command \f[I]\[aq]pstates\[aq]\f[R]
.SS General options
.TP
\f[B]-h\f[R]
Show a short help message and exit.
.TP
\f[B]-q\f[R]
Be quiet.
.TP
\f[B]-d\f[R]
Print debugging information.
.TP
\f[B]--version\f[R]
Print version and exit.
.TP
\f[B]-H\f[R] \f[I]HOSTNAME\f[R], \f[B]--host\f[R] \f[I]HOSTNAME\f[R]
Name of the host to run the command on.
.TP
\f[B]-U\f[R] \f[I]USERNAME\f[R], \f[B]--username\f[R] \f[I]USERNAME\f[R]
Name of the user to use for logging into the remote host over SSH.
The default user name is \[aq]root\[aq].
.TP
\f[B]-K\f[R] \f[I]PRIVKEY\f[R], \f[B]--priv-key\f[R] \f[I]PRIVKEY\f[R]
Path to the private SSH key that should be used for logging into the
remote host.
By default the key is automatically found from standard paths like
\[aq]$HOME/.ssh\[aq].
.TP
\f[B]-T\f[R] \f[I]TIMEOUT\f[R], \f[B]--timeout\f[R] \f[I]TIMEOUT\f[R]
SSH connection timeout in seconds, default is 8.
.TP
\f[B]-D\f[R] \f[I]DATASET\f[R], \f[B]--dataset\f[R] \f[I]DATASET\f[R]
This option is for debugging and testing purposes only, it defines the
dataset that will be used to emulate a host for running the command on.
This option is typically used when running \[aq]pepc\[aq] from the
source code directory, which includes datasets for many different
systems.
.RS
.PP
The argument can be the dataset path, \[aq]all\[aq] to specify all
available dataset or name in which case the following locations will be
searched for.
.IP "1." 3
\[aq]./tests/data\[aq], in the directory of the running program
.IP "2." 3
\[aq]$PEPC_DATA_PATH/tests/data\[aq]
.IP "3." 3
\[aq]$HOME/.local/share/pepc/tests/data\[aq]
.IP "4." 3
\[aq]/usr/local/share/pepc/tests/data\[aq]
.IP "5." 3
\[aq]/usr/share/pepc/tests/data\[aq]
.RE
.TP
\f[B]--force-color\f[R]
Force coloring of the text output.
.SS Subcommand \f[I]\[aq]info\[aq]\f[R]
.PP
Get P-states information for specified CPUs.
By default, prints all information for all CPUs.
.TP
\f[B]--cpus\f[R] \f[I]CPUS\f[R]
List of CPUs to get information about.
The list can include individual CPU numbers and CPU number ranges.
For example,\[aq]1-4,7,8,10-12\[aq] would mean CPUs 1 to 4, CPUs 7, 8,
and 10 to 12.
Use the special keyword \[aq]all\[aq] to specify all CPUs.
.TP
\f[B]--cores\f[R] \f[I]CORES\f[R]
List of cores to get information about.
The list can include individual core numbers and core number ranges.
For example, \[aq]1-4,7,8,10-12\[aq] would mean cores 1 to 4, cores 7,
8, and 10 to 1.
Use the special keyword \[aq]all\[aq] to specify all cores.
This option has to be accompanied by \[aq]--package\[aq] option, because
core numbers are per-package.
.TP
\f[B]--packages\f[R] \f[I]PACKAGES\f[R]
List of packages to get information about.
The list can include individual package numbers and package number
ranges.
For example, \[aq]0,2-4\[aq] would mean package 0 and packages 2 to 4.
Use the special keyword \[aq]all\[aq] to specify all packages.
.TP
\f[B]--core-siblings\f[R] \f[I]CORE_SIBLINGS\f[R]
List of core sibling indices to get information about.
The list can include individual core sibling indices or index ranges.
For example, core x includes CPUs 3 and 4, \[aq]0\[aq] would mean CPU 3
and \[aq]1\[aq] would mean CPU 4.
This option can only be used to reference online CPUs, because Linux
does not provide topology information for offline CPUs.
In the previous example if CPU 3 was offline, then \[aq]0\[aq] would
mean CPU 4.
.TP
\f[B]--yaml\f[R]
Print information in YAML format.
.TP
\f[B]--override-cpu-model\f[R] \f[I]MODEL\f[R]
This option is for debugging and testing purposes only.
Provide the CPU model number which the tool treats the target system CPU
as.
For example, use 0x8F to treat the target system as Sapphire Rapids
Xeon.
.TP
\f[B]--list-mechanisms\f[R]
List mechanisms available for reading P-states information.
.TP
\f[B]--min-freq\f[R]
Get minimum CPU frequency (details in \[aq]min_freq\[aq]).
.TP
\f[B]--max-freq\f[R]
Get maximum CPU frequency (details in \[aq]max_freq\[aq]).
.TP
\f[B]--min-freq-limit\f[R]
Get minimum supported CPU frequency (details in
\[aq]min_freq_limit\[aq]).
.TP
\f[B]--max-freq-limit\f[R]
Get maximum supported CPU frequency (details in
\[aq]max_freq_limit\[aq]).
.TP
\f[B]--frequencies\f[R]
Get acceptable CPU frequencies (details in \[aq]frequencies\[aq]).
.TP
\f[B]--base-freq\f[R]
Get base CPU frequency (details in \[aq]base_freq\[aq]).
.TP
\f[B]--bus-clock\f[R]
Get bus clock speed (details in \[aq]bus_clock\[aq]).
.TP
\f[B]--min-oper-freq\f[R]
Get minimum CPU operating frequency (details in
\[aq]min_oper_freq\[aq]).
.TP
\f[B]--max-eff-freq\f[R]
Get maximum CPU efficiency frequency (details in
\[aq]max_eff_freq\[aq]).
.TP
\f[B]--turbo\f[R]
Check if turbo is enabled or disabled (details in \[aq]turbo\[aq]).
.TP
\f[B]--max-turbo-freq\f[R]
Get maximum CPU turbo frequency (details in \[aq]max_turbo_freq\[aq]).
.TP
\f[B]--min-uncore-freq\f[R]
Get minimum uncore frequency (details in \[aq]min_uncore_freq\[aq]).
.TP
\f[B]--max-uncore-freq\f[R]
Get maximum uncore frequency (details in \[aq]max_uncore_freq\[aq]).
.TP
\f[B]--min-uncore-freq-limit\f[R]
Get minimum supported uncore frequency (details in
\[aq]min_uncore_freq_limit\[aq]).
.TP
\f[B]--max-uncore-freq-limit\f[R]
Get maximum supported uncore frequency (details in
\[aq]max_uncore_freq_limit\[aq]).
.TP
\f[B]--hwp\f[R]
Check if hardware power management is enabled or disabled (details in
\[aq]hwp\[aq]).
.TP
\f[B]--epp\f[R]
Get EPP via sysfs (details in \[aq]epp\[aq]).
.TP
\f[B]--epb\f[R]
Get EPB via sysfs (details in \[aq]epb\[aq]).
.TP
\f[B]--driver\f[R]
Get CPU frequency driver (details in \[aq]driver\[aq]).
.TP
\f[B]--intel-pstate-mode\f[R]
Get operation mode of \[aq]intel_pstate\[aq] driver (details in
\[aq]intel_pstate_mode\[aq]).
.TP
\f[B]--governor\f[R]
Get CPU frequency governor (details in \[aq]governor\[aq]).
.TP
\f[B]--governors\f[R]
Get list of available CPU frequency governors (details in
\[aq]governors\[aq]).
.SS Subcommand \f[I]\[aq]config\[aq]\f[R]
.PP
Configure P-states on specified CPUs.
All options can be used without a parameter, in which case the currently
configured value(s) will be printed.
.TP
\f[B]--cpus\f[R] \f[I]CPUS\f[R]
List of CPUs to configure P-States on.
The list can include individual CPU numbers and CPU number ranges.
For example,\[aq]1-4,7,8,10-12\[aq] would mean CPUs 1 to 4, CPUs 7, 8,
and 10 to 12.
Use the special keyword \[aq]all\[aq] to specify all CPUs.
.TP
\f[B]--cores\f[R] \f[I]CORES\f[R]
List of cores to configure P-States on.
The list can include individual core numbers and core number ranges.
For example, \[aq]1-4,7,8,10-12\[aq] would mean cores 1 to 4, cores 7,
8, and 10 to 12.
Use the special keyword \[aq]all\[aq] to specify all cores.
This option has to be accompanied by \[aq]--package\[aq] option, because
core numbers are per-package.
.TP
\f[B]--packages\f[R] \f[I]PACKAGES\f[R]
List of packages to configure P-States on.
The list can include individual package numbers and package number
ranges.
For example, \[aq]0,2-4\[aq] would mean package 0 and packages 2 to 4.
Use the special keyword \[aq]all\[aq] to specify all packages.
.TP
\f[B]--core-siblings\f[R] \f[I]CORE_SIBLINGS\f[R]
List of core sibling indices to configure P-States on.
The list can include individual core sibling indices or index ranges.
For example, core x includes CPUs 3 and 4, \[aq]0\[aq] would mean CPU 3
and \[aq]1\[aq] would mean CPU 4.
This option can only be used to reference online CPUs, because Linux
does not provide topology information for offline CPUs.
In the previous example if CPU 3 was offline, then \[aq]0\[aq] would
mean CPU 4.
.TP
\f[B]--override-cpu-model\f[R] \f[I]MODEL\f[R]
This option is for debugging and testing purposes only.
Provide the CPU model number which the tool treats the target system CPU
as.
For example, use 0x8F to treat the target system as Sapphire Rapids
Xeon.
.TP
\f[B]-m\f[R] \f[I]MECHANISMS\f[R], \f[B]--mechanisms\f[R] \f[I]MECHANISMS\f[R]
Comma-separated list of mechanisms that are allowed to be used for
configuring P-states.
Use \[aq]--list-mechanisms\[aq] to get the list of available mechanisms.
Note, many options support only one mechanism (e.g., \[aq]sysfs\[aq]),
some may support multiple (e.g., \[aq]sysfs\[aq] and \[aq]msr\[aq]).
The mechanisms are tried in the specified order.
By default, all mechanisms are allowed and the most preferred mechanisms
will be tried first.
.TP
\f[B]--list-mechanisms\f[R]
List mechanisms available for configuring P-states.
.TP
\f[B]--min-freq\f[R] \f[I]MIN_FREQ\f[R]
Set minimum CPU frequency (details in \[aq]min_freq\[aq]).
.TP
\f[B]--max-freq\f[R] \f[I]MAX_FREQ\f[R]
Set maximum CPU frequency (details in \[aq]max_freq\[aq]).
.TP
\f[B]--turbo\f[R] \f[I]on|off\f[R]
Enable or disable turbo (details in \[aq]turbo\[aq]).
.TP
\f[B]--min-uncore-freq\f[R] \f[I]MIN_UNCORE_FREQ\f[R]
Set minimum uncore frequency (details in \[aq]min_uncore_freq\[aq]).
.TP
\f[B]--max-uncore-freq\f[R] \f[I]MAX_UNCORE_FREQ\f[R]
Set maximum uncore frequency (details in \[aq]max_uncore_freq\[aq]).
.TP
\f[B]--epp\f[R] \f[I]EPP\f[R]
Set EPP via sysfs (details in \[aq]epp\[aq]).
.TP
\f[B]--epb\f[R] \f[I]EPB\f[R]
Set EPB via sysfs (details in \[aq]epb\[aq]).
.TP
\f[B]--intel-pstate-mode\f[R] \f[I][MODE]\f[R]
Set operation mode of \[aq]intel_pstate\[aq] driver (details in
\[aq]intel_pstate_mode\[aq]).
.TP
\f[B]--governor\f[R] \f[I][NAME]\f[R]
Set CPU frequency governor (details in \[aq]governor\[aq]).
.SS Subcommand \f[I]\[aq]save\[aq]\f[R]
.PP
Save all the modifiable P-state settings into a file.
This file can later be used for restoring P-state settings with the
\[aq]pepc pstates restore\[aq] command.
.TP
\f[B]--cpus\f[R] \f[I]CPUS\f[R]
List of CPUs to save P-state information about.
The list can include individual CPU numbers and CPU number ranges.
For example,\[aq]1-4,7,8,10-12\[aq] would mean CPUs 1 to 4, CPUs 7, 8,
and 10 to 12.
Use the special keyword \[aq]all\[aq] to specify all CPUs.
.TP
\f[B]--cores\f[R] \f[I]CORES\f[R]
List of cores to save P-state information about.
The list can include individual core numbers and core number ranges.
For example, \[aq]1-4,7,8,10-12\[aq] would mean cores 1 to 4, cores 7,
8, and 10 to 12.
Use the special keyword \[aq]all\[aq] to specify all cores.
This option has to be accompanied by \[aq]--package\[aq] option, because
core numbers are per-package.
.TP
\f[B]--packages\f[R] \f[I]PACKAGES\f[R]
List of packages to save P-state information about.
The list can include individual package numbers and package number
ranges.
For example, \[aq]0,2-4\[aq] would mean package 0 and packages 2 to 4.
Use the special keyword \[aq]all\[aq] to specify all packages.
.TP
\f[B]--core-siblings\f[R] \f[I]CORE_SIBLINGS\f[R]
List of core sibling indices to save P-state information about.
The list can include individual core sibling indices or index ranges.
For example, core x includes CPUs 3 and 4, \[aq]0\[aq] would mean CPU 3
and \[aq]1\[aq] would mean CPU 4.
This option can only be used to reference online CPUs, because Linux
does not provide topology information for offline CPUs.
In the previous example if CPU 3 was offline, then \[aq]0\[aq] would
mean CPU 4.
.TP
\f[B]-o\f[R] \f[I]OUTFILE\f[R], \f[B]--outfile\f[R] \f[I]OUTFILE\f[R]
Name of the file to save the settings to (printed to standard output by
default).
.SS Subcommand \f[I]\[aq]restore\[aq]\f[R]
.PP
Restore P-state settings from a file previously created with the
\[aq]pepc pstates save\[aq] command.
.TP
\f[B]-f\f[R] \f[I]INFILE\f[R], \f[B]--from\f[R] \f[I]INFILE\f[R]
Name of the file from which to restore the settings from, use
\[dq]-\[dq] to read from the standard output.
.PP
   *   *   *   *   *
.SH Properties
.SS min_freq
.PP
min_freq - Minimum CPU frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--min-freq\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--min-freq\f[R]=<value>
.SS Description
.PP
Minimum CPU frequency is the lowest frequency the CPU was configured the
CPU to run at.
.PP
The default unit is \[aq]Hz\[aq], but \[aq]kHz\[aq], \[aq]MHz\[aq], and
\[aq]GHz\[aq] can also be used (for example \[dq]900MHz\[dq]).
.PP
The following special values are supported:
.TP
\f[B]min\f[R]
Minimum frequency supported by the Linux CPU frequency driver (see
\[aq]min_freq_limit\[aq]).
.TP
\f[B]max\f[R]
Maximum frequency supported by the Linux CPU frequency driver (see
\[aq]max_freq_limit\[aq]).
.TP
\f[B]base\f[R], \f[B]hfm\f[R], \f[B]P1\f[R]
Base CPU frequency (see \[aq]base_freq\[aq]).
.TP
\f[B]eff\f[R], \f[B]lfm\f[R], \f[B]Pn\f[R]
Maximum CPU efficiency frequency (see \[aq]max_eff_freq\[aq]).
.TP
\f[B]Pm\f[R]
Minimum CPU operating frequency (see \[aq]min_oper_freq\[aq]).
.PP
Note, on some systems \[aq]Pm\[aq] is lower than \[aq]lfm\[aq].
For example, \[aq]Pm\[aq] may be 500MHz, while \[aq]lfm\[aq] may be
800MHz.
On those system, Linux may be using \[aq]lfm\[aq] as the minimum
supported frequency limit.
So from Linux perspecitve, the minimum frequency may be 800MHz, not
500MHz.
In this case \[aq]--min-freq 500MHz --mechanisms sysfs\[aq] will fail,
while \[aq]--min-freq 500MHz --mechanisms sysfs\[aq] will succeed.
And \[aq]--min-freq 500MHz\[aq] will also succeed, because by default,
pepc tries all the available mechanisms.
.SS Mechanisms
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/policy0/scaling_min_freq\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
.PP
\f[B]msr\f[R] MSR_HWP_REQUEST (0x774), bits 7:0.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS max_freq
.PP
max_freq - Maximum CPU frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--max-freq\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--max-freq\f[R]=<value>
.SS Description
.PP
Maximum CPU frequency is the highest frequency the CPU was configured to
run at.
.PP
The default unit is \[aq]Hz\[aq], but \[aq]kHz\[aq], \[aq]MHz\[aq], and
\[aq]GHz\[aq] can also be used (for example \[aq]900MHz\[aq]).
.PP
The following special values are supported:
.TP
\f[B]min\f[R]
Minimum frequency supported by the Linux CPU frequency driver (see
\[aq]min_freq_limit\[aq]).
.TP
\f[B]max\f[R]
Maximum frequency supported by the Linux CPU frequency driver (see
\[aq]max_freq_limit\[aq]).
.TP
\f[B]base\f[R], \f[B]hfm\f[R], \f[B]P1\f[R]
Base CPU frequency (see \[aq]base_freq\[aq]).
.TP
\f[B]eff\f[R], \f[B]lfm\f[R], \f[B]Pn\f[R]
Maximum CPU efficiency frequency (see \[aq]max_eff_freq\[aq]).
.TP
\f[B]Pm\f[R]
Minimum CPU operating frequency (see \[aq]min_oper_freq\[aq]).
.SS Mechanisms
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/policy0/scaling_max_freq\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
.PP
\f[B]msr\f[R] MSR_HWP_REQUEST (0x774), bits 15:8.
.PP
   *   *   *   *   *
.PP
This property has CPU scope.
.SS min_freq_limit
.PP
min_freq_limit - Minimum supported CPU frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--min-freq-limit\f[R]
.SS Description
.PP
Minimum supported CPU frequency is the lowest frequency the CPU can be
configured to run at.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/policy0/cpuinfo_min_freq\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS max_freq_limit
.PP
max_freq_limit - Maximum supported CPU frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--min-freq-limit\f[R]
.SS Description
.PP
Maximum supported CPU frequency is the highest frequency the CPU can be
configured to run at.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/policy0/cpuinfo_max_freq\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS frequencies
.PP
frequencies - acceptable CPU frequencies
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--frequencies\f[R]
.SS Description
.PP
List of CPU frequencies exposed by the Linux CPU frequency driver and
available for the users via \[aq]--min-freq\[aq] and
\[aq]--max-freq\[aq] options.
.SS Mechanisms
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies\[dq],
\[aq]0\[aq] is replaced with desired CPU number.
.PP
\f[B]doc\f[R] In case of Intel CPUs and \[aq]intel_idle\[aq] driver,
assume all frequencies from \[aq]min_freq_limit\[aq] to
\[aq]max_freq_limit\[aq] with \[aq]bus_clock\[aq] step.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS base_freq
.PP
base_freq - Base CPU frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--base-freq\f[R]
.SS Description
.PP
Base CPU frequency is the highest sustainable CPU frequency.
This frequency is also referred to as \[dq]guaranteed frequency\[dq],
HFM (High Frequency Mode), or P1.
.PP
The base frequency is acquired from a sysfs file or from an MSR
register, depending on platform and the CPU frequency driver.
.SS Mechanisms
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/policy0/base_frequency\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
If this file does not exist, the
\[dq]/sys/devices/system/cpu/cpu0/cpufreq/bios_limit\[dq] sysfs file is
used (where \[aq]0\[aq] is replaced with desired CPU number).
.PP
\f[B]msr\f[R] MSR_PLATFORM_INFO (0xCE), bits 15:8.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS bus_clock
.PP
bus_clock - Bus clock speed.
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--bus-clock\f[R]
.SS Description
.PP
Bus clock refers to how quickly the system bus can move data from one
computer component to the other.
.SS Mechanisms
.PP
\f[B]msr\f[R] MSR_FSB_FREQ (0xCD), bits 2:0.
\f[B]doc\f[R] 100MHz on modern Intel platforms.
.SS Scope
.PP
This property has package scope.
Exceptions: Silvermonts and Airmonts have module scope.
.PP
   *   *   *   *   *
.SS min_oper_freq
.PP
min_oper_freq - Minimum CPU operating frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--min-oper-freq\f[R]
.SS Description
.PP
Minimum operating frequency is the lowest possible frequency the CPU can
operate at.
Depending on the CPU model, this frequency may or may not be directly
available to the OS, but the platform may use it in certain situations
(e.g., in some C-states).
This frequency is also referred to as Pm.
.SS Mechanism
.PP
\f[B]msr\f[R] MSR_PLATFORM_INFO (0xCE), bits 55:48.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS max_eff_freq
.PP
max_eff_freq - Maximum CPU efficiency frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--max-eff-freq\f[R]
.SS Description
.PP
Maximum efficiency frequency is the most energy efficient CPU frequency.
This frequency is also referred to as LFM (Low Frequency Mode) or Pn.
.SS Mechanism
.PP
\f[B]msr\f[R] MSR_PLATFORM_INFO (0xCE), bits 47:40.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS turbo
.PP
turbo - Turbo
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--turbo\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--turbo\f[R]=<on|off>
.SS Description
.PP
When turbo is enabled, the CPUs can automatically run at a frequency
greater than base frequency.
.SS Mechanism
.PP
\f[B]sysfs\f[R] Location of the turbo knob in sysfs depends on the CPU
frequency driver.
.PP
intel_pstate - \[dq]/sys/devices/system/cpu/intel_pstate/no_turbo\[dq]
.PP
acpi-cpufreq - \[dq]/sys/devices/system/cpu/cpufreq/boost\[dq]
.SS Scope
.PP
This property has global scope.
.PP
   *   *   *   *   *
.SS max_turbo_freq
.PP
max_turbo_freq - Maximum CPU turbo frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--max-turbo-freq\f[R]
.SS Description
.PP
Maximum 1-core turbo frequency is the highest frequency a single CPU can
operate at.
This frequency is also referred to as max.
1-core turbo and P01.
.SS Mechanism
.PP
\f[B]msr\f[R] MSR_TURBO_RATIO_LIMIT (0x1AD), bits 7:0.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS min_uncore_freq
.PP
min_uncore_freq - Minimum uncore frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--min-uncore-freq\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--min-uncore-freq\f[R]=<value>
.SS Description
.PP
Minimum uncore frequency is the lowest frequency the OS configured the
CPU to run at, via sysfs knobs.
.PP
The default unit is \[aq]Hz\[aq], but \[aq]kHz\[aq], \[aq]MHz\[aq], and
\[aq]GHz\[aq] can also be used (for example \[aq]900MHz\[aq]).
.PP
The following special values are supported:
.TP
\f[B]min\f[R]
Minimum uncore frequency supported (see \[aq]min_freq_limit\[aq]).
.TP
\f[B]max\f[R]
Maximum uncore frequency supported (see \[aq]max_freq_limit\[aq]).
.TP
\f[B]mdl\f[R]
Middle uncore frequency between minimum and maximum rounded to nearest
100MHz.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/intel_uncore_frequency/package_00_die_01/min_freq_khz\[dq],
where \[aq]00\[aq] is replaced with desired package number and
\[aq]01\[aq] is replaced with desired die number.
.SS Scope
.PP
This property has die scope.
.PP
   *   *   *   *   *
.SS max_uncore_freq
.PP
max_uncore_freq - Maximum uncore frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--max-uncore-freq\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--max-uncore-freq\f[R]=<value>
.SS Description
.PP
Maximum uncore frequency is the highest frequency the OS configured the
CPU to run at, via sysfs knobs.
.PP
The default unit is \[aq]Hz\[aq], but \[aq]kHz\[aq], \[aq]MHz\[aq], and
\[aq]GHz\[aq] can also be used (for example \[dq]900MHz\[dq]).
.PP
The following special values are supported:
.TP
\f[B]min\f[R]
Minimum uncore frequency supported (see \[aq]min_freq_limit\[aq]).
.TP
\f[B]max\f[R]
Maximum uncore frequency supported (see \[aq]max_freq_limit\[aq]).
.TP
\f[B]mdl\f[R]
Middle uncore frequency between minimum and maximum rounded to nearest
100MHz.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/intel_uncore_frequency/package_00_die_01/max_freq_khz\[dq],
where \[aq]00\[aq] is replaced with desired package number and
\[aq]01\[aq] is replaced with desired die number.
.SS Scope
.PP
This property has die scope.
.PP
   *   *   *   *   *
.SS min_uncore_freq_limit
.PP
min_uncore_freq_limit - Minimum supported uncore frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--min-uncore-freq-limit\f[R]
.SS Description
.PP
Minimum supported uncore frequency is the lowest uncore frequency
supported by the OS.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/intel_uncore_frequency/package_00_die_01/initial_min_freq_khz\[dq],
where \[aq]00\[aq] is replaced with desired package number and
\[aq]01\[aq] is replaced with desired die number.
.SS Scope
.PP
This property has die scope.
.PP
   *   *   *   *   *
.SS max_uncore_freq_limit
.PP
max_uncore_freq_limit - Maximum supported uncore frequency
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--max-uncore-freq-limit\f[R]
.SS Description
.PP
Maximum supported uncore frequency is the highest uncore frequency
supported by the OS.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/intel_uncore_frequency/package_00_die_01/initial_max_freq_khz\[dq],
where \[aq]00\[aq] is replaced with desired package number and
\[aq]01\[aq] with desired die number.
.SS Scope
.PP
This property has die scope.
.PP
   *   *   *   *   *
.SS hwp
.PP
hwp - Hardware power management
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--hwp\f[R]
.SS Description
.PP
When hardware power management is enabled, CPUs can automatically scale
their frequency without active OS involvement.
.SS Mechanism
.PP
\f[B]msr\f[R] MSR_PM_ENABLE (0x770), bit 0.
.SS Scope
.PP
This property has global scope.
.PP
   *   *   *   *   *
.SS epp
.PP
epp - Energy Performance Preference
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--epp\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--epp\f[R]=<value>
.SS Description
.PP
Energy Performance Preference is a hint to the CPU on energy efficiency
vs performance.
EPP value is a number in range of 0-255 (maximum energy efficiency to
maximum performance), or a policy name.
.PP
Mechanisms ---------
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference\[dq],
where \[aq]0\[aq] is replaced with desired CPU number.
.PP
\f[B]msr\f[R] MSR_HWP_REQUEST (0x774), bits 31:24.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS epb
.PP
epb - Energy Performance Bias
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--epb\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--epb\f[R]=<value>
.SS Description
.PP
Energy Performance Bias is a hint to the CPU on energy efficiency vs
performance.
EBP value is a number in range of 0-15 (maximum performance to maximum
energy efficiency), or a policy name.
.SS Mechanisms
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/cpu0/power/energy_perf_bias\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
.PP
\f[B]msr\f[R] MSR_ENERGY_PERF_BIAS (0x1B0), bits 3:0.
.SS Scope
.PP
This property has CPU scope on most platforms.
However, on Silvermont systems it has core scope and on Westmere and
Sandybridge systems it has package scope.
.PP
   *   *   *   *   *
.SS driver
.PP
driver - CPU frequency driver
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--driver\f[R]
.SS Description
.PP
CPU frequency driver enumerates and requests the P-states available on
the platform.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/cpufreq/policy0/scaling_driver\[dq], where
\[aq]0\[aq] is replaced with desired CPU number.
.SS Scope
.PP
This property has global scope.
.PP
   *   *   *   *   *
.SS intel_pstate_mode
.PP
intel_pstate_mode - Operation mode of \[aq]intel_pstate\[aq] driver
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--intel-pstate-mode\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--intel-pstate-mode\f[R]=<mode>
.SS Description
.PP
The \[aq]intel_pstate\[aq] driver has 3 operation modes:
\[aq]active\[aq], \[aq]passive\[aq] and \[aq]off\[aq].
The main difference between the active and passive mode is in which
frequency governors are used - the generic Linux governors (passive
mode) or the custom, built-in \[aq]intel_pstate\[aq] driver governors
(active mode).
.SS Mechanism
.PP
\f[B]sysfs\f[R] \[dq]/sys/devices/system/cpu/intel_pstate/status\[dq].
.SS Scope
.PP
This property has global scope.
.PP
   *   *   *   *   *
.SS governor
.PP
governor - CPU frequency governor
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--governor\f[R]
.PD 0
.P
.PD
pepc pstates \f[I]config\f[R] \f[B]--governor\f[R]=<name>
.SS Description
.PP
CPU frequency governor decides which P-state to select on a CPU
depending on CPU business and other factors.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/cpufreq/policy0/scaling_governor\[dq],
where \[aq]0\[aq] is replaced with desired CPU number.
.SS Scope
.PP
This property has CPU scope.
.PP
   *   *   *   *   *
.SS governors
.PP
governors - Available CPU frequency governors
.SS Synopsis
.PP
pepc pstates \f[I]info\f[R] \f[B]--governors\f[R]
.SS Description
.PP
CPU frequency governors decide which P-state to select on a CPU
depending on CPU business and other factors.
Different governors implement different selection policy.
.SS Mechanism
.PP
\f[B]sysfs\f[R]
\[dq]/sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors\[dq],
where \[aq]0\[aq] is replaced with desired CPU number.
.SS Scope
.PP
This property has global scope.
