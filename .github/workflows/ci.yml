# Name of the workflow, visible in the GitHub Actions UI
name: "CI"
# Define the events that trigger this workflow
on:
  # Trigger on push events
  push:
    branches:
      - "main"
      - "github-ci"

  # Trigger on pull request events
  pull_request:
    branches:
      - "main"

# Define the jobs to run in this workflow
jobs:
  check-pytest:
    name: "Check with python-${{ matrix.python-version }}"
    runs-on: innersource.prod.amr.dind

    # Define a matrix strategy to run the job for multiple Python versions
    strategy:
      # Ensure all matrix jobs run even if one fails
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: "Install packages"
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq -y install file rsync

      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          # Fetch the full commit history for comparison
          fetch-depth: 0

      - name: "Information about changes"
        run: |
          # Determine the base commit for comparison based on the event type
          [ "${{ github.event_name }}" = "push" ] &&
            from="refs/remotes/origin/${{ github.event.repository.default_branch }}" ||
            from="${{ github.event.pull_request.base.sha }}"

          # List all commits in the range and display them
          git rev-list --pretty=oneline "$from..HEAD" --

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip

          pip install --upgrade .
          pip install pytest pylint mypy ruff darglint2 pydoclint coverage \
            types-PyYAML types-paramiko types-colorama

          mypy --install-types --verbose

      - name: "Find modified files"
        run: |
          # Determine the base commit for comparison based on the event type
          # For push events, use the default branch
          # For pull requests, use the base commit of the PR
          [ "${{ github.event_name }}" = "push" ] &&
            from="refs/remotes/origin/${{ github.event.repository.default_branch }}" ||
            from="${{ github.event.pull_request.base.sha }}"

          touch /tmp/modified-files

          # Find modified files, filter for Python scripts, and save them to /tmp/modified-files
          git diff-tree --diff-filter=d --no-commit-id --name-status -r "$from..HEAD" | \
            cut -f2- | xargs -r file -Ni -- | \
            sed -n -e 's#: text/x-script.python;.*##p' > /tmp/modified-files;

          echo "Files to check:"
          cat /tmp/modified-files

      - name: "Run mypy for type checking on modified files"
        run: |
          xargs -a /tmp/modified-files -r mypy > /tmp/mypy.results || retcode=1

          # Format the mypy output for GitHub annotations
          sed < /tmp/mypy.results -r -n \
            -e 's#^(.*\.py):([0-9]+): ([^:]+): (.*)#::\3 file=\1,line=\2,endline=,col=1::[mypy] \4#' \
            -e 's#::note #::notice #' \
            -e '/^::/p'

          exit ${retcode:-0}

      - name: "Run pylint for code quality checks on modified files"
        run: |
          xargs -a /tmp/modified-files -r pylint --output-format=github --score=no --jobs=0 --disable=similarities --no-docstring-rgx=^$ --verbose > /tmp/pylint.results || retcode=1

          # Format the pylint output for GitHub annotations
          sed < /tmp/pylint.results -r \
            -e 's#^(::.*),title=(.*)::#\1::[pylint] \2: #'

          exit ${retcode:-0}

      - name: "Run ruff for fast linting on modified files"
        run: |
          xargs -a /tmp/modified-files -r ruff check --output-format github > /tmp/ruff.results 2>&1 || retcode=1

          # Format the ruff output for GitHub annotations
          sed < /tmp/pylint.results -r \
             -e 's#^(::.*),title=(.*)::#\1::[ruff] \2: #'

          exit ${retcode:-0}

      - name: "Run darglint2 to check docstring compliance on modified files"
        run: |
          # Run darglint2 on the modified files and format the output for GitHub annotations
          xargs -a /tmp/modified-files -r darglint2 -m '::error file={path},line={line},endline=,col=1::[darglint2] {msg_id}: {obj}: {msg}' || retcode=1

          exit ${retcode:-0}

      - name: "Run pydoclint to check for docstring style issues on modified files"
        run: |
          xargs -a /tmp/modified-files -r pydoclint -sfn True > /tmp/pydoclint.results 2>&1 || retcode=1

          # Format the pydoclint output for GitHub annotations
          sed < /tmp/pydoclint.results -r \
            -e 's#^(.*\.py):([0-9]+): #::error file=\1,line=\2,endline=,col=1::[pydoclint] #'

          exit ${retcode:-0}

      - name: "Run pytest to execute tests and collect coverage data"
        run: coverage run -m pytest -v
        env:
          SHELL: /bin/sh

      - name: "Display the test coverage report"
        run: coverage report
